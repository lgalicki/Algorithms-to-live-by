'''
This generates multi-armed bandits, returning a bandit with the ammount of
arms requested. The win probability of each arm is randomly generated in a
transparent way, and it can be between 0% and 100%.
'''
from random import randint

class Arm():
    '''
    Arms should belong to a bandit. When created, the arm's winning probability
    is automatically calculated in random fashion between 0% and 100%. An arm
    can be played, and when played it will return True to win and False to loss.
    '''
    def __init__(self):
        self.win_prob = randint(0, 100)


    def __str__(self):
        return str(self.win_prob)


    def play(self):
        '''
        Returns
        -------
        bool
            True means a win. False means a loss.
        '''
        draw = randint(0, 100)
        #If number drawn is out of the winning range
        if draw > self.win_prob:
            return False

        return True


class Bandit():
    '''
    Your multi-armed bandit. When creating, inform the ammount of arms.
    '''
    def __init__(self, arms):
        '''
        Parameters
        ----------
        arms : int()
            Quantity of arms the bandit has.

        Returns
        -------
        None.
        '''
        self.arms = list()
        for _ in range(arms):
            self.arms.append(Arm())


    def __len__(self):
        return len(self.arms)


    def __str__(self):
        return_str = 'Winning probabilities: '
        for pos, arm in enumerate(self.arms):
            return_str += f'arm {pos}: {arm.win_prob}%  '

        return_str += '\n'
        return return_str


    def play_arm(self, arm_num):
        '''
        This plays the asked arm. Arm numbers start with 0.

        Parameters
        ----------
        arm_num : int()
            Number of the arm that should be played.

        Returns
        -------
        True for a win, False for a loss.
        '''
        return self.arms[arm_num].play()


class Result():
    '''
    Defines objects which contain information about the full execution of a
    method in a bandit. It contains two integers, one for overal wins and another
    for overall losses, and a list with dictionaries, each one to an specific
    arm, containing the number of wins and losses of each individual arm.
    '''
    def __init__(self, bandit):
        self.wins = int()
        self.losses = int()

        #Initializing the individual results for each arm
        self.arm_results = list()
        for _ in range(len(bandit)):
            self.arm_results.append({'wins':0, 'losses':0})


    def __str__(self):
        perc_wins = self.wins / (self.wins + self.losses) * 100
        perc_losses = self.losses / (self.wins + self.losses) * 100

        return_str = f'Wins: {self.wins} ({perc_wins:0.2f})%\t'
        return_str += f'Losses: {self.losses} ({perc_losses:0.2f})%\n'

        for pos, i in enumerate(self.arm_results):
            arm_wins = i['wins']
            arm_losses = i['losses']
            arm_plays = arm_wins + arm_losses
            bandit_plays = self.wins + self.losses
            arm_perc = arm_plays / bandit_plays * 100

            return_str += f"Arm {pos} - w: {arm_wins}  l: {arm_losses}"
            return_str += f' - plays: {arm_plays} ({arm_perc:0.2f})%\n'

        return return_str


    def win(self, arm_nr):
        '''
        Registers a win for an arm and, consequently for the whole bandit.

        Parameters
        ----------
        arm_nr : number
            Number of the arm that was played.

        Returns
        -------
        None.
        '''
        self.wins += 1
        self.arm_results[arm_nr]['wins'] += 1

    def loss(self, arm_nr):
        '''
        Registers a loss for an arm and, consequently for the whole bandit.

        Parameters
        ----------
        arm_nr : number
            Number of the arm that was played.

        Returns
        -------
        None.
        '''
        self.losses += 1
        self.arm_results[arm_nr]['losses'] += 1
