'''
This generates multi-armed bandits, returning a bandit with the ammount of
arms requested. The win probability of each arm is randomly generated in a
transparent way, and it can be between 0% and 100%.
'''
from random import randint

class Arm():
    '''
    Arms should belong to a bandit. When created, the arm's winning probability
    is automatically calculated in random fashion between 0% and 100%. An arm
    can be played, and when played it will return True to win and False to loss.
    '''
    def __init__(self):
        self.win_prob = randint(0, 100)


    def __str__(self):
        return str(self.win_prob)


    def play(self):
        '''
        Returns
        -------
        bool
            True means a win. False means a loss.
        '''
        draw = randint(0, 100)
        #If number drawn is out of the winning range
        if draw > self.win_prob:
            return False

        return True


class Bandit():
    '''
    Your multi-armed bandit. When creating, inform the ammount of arms.
    '''
    def __init__(self, arms):
        '''
        Parameters
        ----------
        arms : int()
            Quantity of arms the bandit has.

        Returns
        -------
        None.
        '''
        self.arms = list()
        for _ in range(arms):
            self.arms.append(Arm())


    def __len__(self):
        return len(self.arms)


    def __str__(self):
        return_str = str()
        for arm in self.arms:
            return_str += str(arm) + '|'

        return return_str


    def play_arm(self, arm_num):
        '''
        This plays the asked arm. Arm numbers start with 0.

        Parameters
        ----------
        arm_num : int()
            Number of the arm that should be played.

        Returns
        -------
        True for a win, False for a loss.
        '''
        return self.arms[arm_num].play()
